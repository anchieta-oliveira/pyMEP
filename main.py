""" pyMEP

The pyMEP (Python Molecular Electrostatic Potential) is a Python library designed for the calculation and visualization of Molecular Electrostatic Potentials (MEP).
"""

# Imports
############################################################################################################
import argparse as ap

import numpy as np
from pymep.MOL.PDB import PDB
from pymep.MOL.xyz import XYZ
from pymep.mep import MEP

# Parser
############################################################################################################

logo = """

  ░▒▓███████▓▒░  ░▒▓█▓▒░░▒▓█▓▒░ ░▒▓██████████████▓▒░  ░▒▓████████▓▒░ ░▒▓███████▓▒░  
  ░▒▓█▓▒░░▒▓█▓▒░ ░▒▓█▓▒░░▒▓█▓▒░ ░▒▓█▓▒░░▒▓█▓▒░░▒▓█▓▒░ ░▒▓█▓▒░        ░▒▓█▓▒░░▒▓█▓▒░ 
  ░▒▓█▓▒░░▒▓█▓▒░ ░▒▓█▓▒░░▒▓█▓▒░ ░▒▓█▓▒░░▒▓█▓▒░░▒▓█▓▒░ ░▒▓█▓▒░        ░▒▓█▓▒░░▒▓█▓▒░ 
  ░▒▓███████▓▒░   ░▒▓██████▓▒░  ░▒▓█▓▒░░▒▓█▓▒░░▒▓█▓▒░ ░▒▓██████▓▒░   ░▒▓███████▓▒░  
  ░▒▓█▓▒░           ░▒▓█▓▒░     ░▒▓█▓▒░░▒▓█▓▒░░▒▓█▓▒░ ░▒▓█▓▒░        ░▒▓█▓▒░        
  ░▒▓█▓▒░           ░▒▓█▓▒░     ░▒▓█▓▒░░▒▓█▓▒░░▒▓█▓▒░ ░▒▓█▓▒░        ░▒▓█▓▒░        
  ░▒▓█▓▒░           ░▒▓█▓▒░     ░▒▓█▓▒░░▒▓█▓▒░░▒▓█▓▒░ ░▒▓████████▓▒░ ░▒▓█▓▒░        
                                                                                    
                                                                                
"""

# Create the parser
parser = ap.ArgumentParser(description=f'{logo}\n\nThe pyMEP (Python Molecular Electrostatic Potential) is a Python library designed for the calculation and visualization of Molecular Electrostatic Potentials (MEP).',
                           formatter_class=ap.RawTextHelpFormatter )

# Add the arguments
parser.add_argument('-ff', '--force_field',
    help='Force field file used for calculations (e.g., CHARMM, AMBER).',
)

parser.add_argument('-mop', '--mopac_file',
    help='MOPAC output file.'
)

parser.add_argument('-orca', '--orca_file',
    help='ORCA output file.'
)

parser.add_argument('-xtb', '--xtb_file_charge',
    help='XTB output charge file for charge.'
)

parser.add_argument('-psf', '--psf_file',
    help='System topology file (PSF), typically generated by software like VMD or CHARMM.'
)

parser.add_argument('-chg_file', '--charge_file',
    help='Path to the file containing charge information.'
)

parser.add_argument('-gpu', '--gpu',
    help='Enable GPU acceleration if available.',
    action='store_true',
    default=False
)

parser.add_argument('-gpu_id', '--gpu_id',
    help='Specify the GPU ID to use (default: all gpus).',
    default="0"
)

parser.add_argument('-u', '--unit',
    help='Unit output.',
    default=""
)

parser.add_argument('-o', '--output',
    help='Path to the output file or directory where results will be saved.',
    default="mep.cube"
)

parser.add_argument('-cutoff', '--cutoff',
    help='Path to the output file or directory where results will be saved.',
    default=15,
)

parser.add_argument('-gs', '--grid_spacing',
    help='Grid spacing value to be used in calculations (default: 1).',
    default=1,
)

parser.add_argument('-m', '--margin',
    help='Margin value to be used in calculations (default: 0.3).',
    default=0.3,
)

parser.add_argument('-pdb', '--pdb_file',
    help='PDB file.',
)

parser.add_argument('-xyz', '--xyz_file',
    help='XYZ file.',
)

# Execute the parse_args() method
args = parser.parse_args()

def is_out() -> str:
    return args.output.split(".")[-1]


gpu_id = args.gpu_id.split(","); gpu_id = list(map(lambda x: int(x), gpu_id))

mep = MEP()
if args.pdb_file != "":
    mol = PDB(args.pdb_file)
elif args.xyz_file != "":
    mol = XYZ(args.xyz_file)
    mol = PDB()
    mol.make(atoms=mol.atoms)
else:
    mol = PDB()


if args.force_field:
    vol = mep.calculate(pdb=mol, 
                        FF=args.force_field, 
                        form=is_out(),
                        gpu=args.gpu,
                        cutoff=float(args.cutoff),
                        unit=args.unit,
                        res=float(args.grid_spacing),
                        margim=float(args.margin),
                        gpus_id=gpu_id
                        )
    
    vol.write(args.output)

elif args.mopac_file:
    from pymep.QM.aux import AUX
    aux = AUX()
    aux.read_file(args.mopac_file)
    vol = mep.calculate(pdb=mol, 
                        aux=aux, 
                        form=is_out(), 
                        gpu=args.gpu,
                        cutoff=float(args.cutoff),
                        unit=args.unit,
                        res=float(args.grid_spacing),
                        margim=float(args.margin), 
                        gpus_id=gpu_id              
                        )
    
    vol.write(args.output)

elif args.orca_file:
    from pymep.QM.orca_out import OrcaOut
    orc = OrcaOut()
    orc.read_file(args.orca_file)
    vol = mep.calculate(pdb=mol, 
                        orca_out=orc, 
                        form=is_out(), 
                        gpu=args.gpu,
                        cutoff=float(args.cutoff),
                        unit=args.unit,
                        res=float(args.grid_spacing),
                        margim=float(args.margin),     
                        gpus_id=gpu_id              
                        )
    
    vol.write(args.output)

elif args.psf_file:
    from pymep.MOL.PSF import PSF
    psf = PSF(args.psf_file)
    vol = mep.calculate(pdb=mol, 
                        charges=psf.charges,
                        form=is_out(), 
                        gpu=args.gpu,
                        cutoff=float(args.cutoff),
                        unit=args.unit,
                        res=float(args.grid_spacing),
                        margim=float(args.margin),   
                        gpus_id=gpu_id                
                        )
    
    vol.write(args.output)

elif args.charge_file:
    with open(args.charge_file, "r") as file:
        c = file.readlines()
        charges = np.array(list(map(lambda x: float(x),c)))

    vol = mep.calculate(pdb=mol, 
                        charges=charges,
                        form=is_out(), 
                        gpu=args.gpu,
                        cutoff=float(args.cutoff),
                        unit=args.unit,
                        res=float(args.grid_spacing),
                        margim=float(args.margin),
                        gpus_id=gpu_id                
                        )
    
    vol.write(args.output)

elif args.xtb_file_charge:
    with open(args.xtb_file_charge, "r") as file:
        c = file.readlines()
        charges = np.array(list(map(lambda x: float(x),c)))

    vol = mep.calculate(pdb=mol, 
                        charges=charges,
                        form=is_out(), 
                        gpu=args.gpu,
                        cutoff=float(args.cutoff),
                        unit=args.unit,
                        res=float(args.grid_spacing),
                        margim=float(args.margin),   
                        gpus_id=gpu_id                 
                        )
    
    vol.write(args.output)
